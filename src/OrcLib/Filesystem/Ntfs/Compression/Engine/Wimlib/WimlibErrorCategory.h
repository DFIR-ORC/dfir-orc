//
// SPDX-License-Identifier: LGPL-2.1-or-later
//
// Copyright 2021 ANSSI. All Rights Reserved.
//
// Author(s): fabienfl (ANSSI)
//

#pragma once

#include <string>
#include <system_error>

namespace Orc {

enum class wimlib_errc : int
{
    WIMLIB_ERR_SUCCESS = 0,
    WIMLIB_ERR_ALREADY_LOCKED = 1,
    WIMLIB_ERR_DECOMPRESSION = 2,
    WIMLIB_ERR_FUSE = 6,
    WIMLIB_ERR_GLOB_HAD_NO_MATCHES = 8,
    WIMLIB_ERR_IMAGE_COUNT = 10,
    WIMLIB_ERR_IMAGE_NAME_COLLISION = 11,
    WIMLIB_ERR_INSUFFICIENT_PRIVILEGES = 12,
    WIMLIB_ERR_INTEGRITY = 13,
    WIMLIB_ERR_INVALID_CAPTURE_CONFIG = 14,
    WIMLIB_ERR_INVALID_CHUNK_SIZE = 15,
    WIMLIB_ERR_INVALID_COMPRESSION_TYPE = 16,
    WIMLIB_ERR_INVALID_HEADER = 17,
    WIMLIB_ERR_INVALID_IMAGE = 18,
    WIMLIB_ERR_INVALID_INTEGRITY_TABLE = 19,
    WIMLIB_ERR_INVALID_LOOKUP_TABLE_ENTRY = 20,
    WIMLIB_ERR_INVALID_METADATA_RESOURCE = 21,
    WIMLIB_ERR_INVALID_OVERLAY = 23,
    WIMLIB_ERR_INVALID_PARAM = 24,
    WIMLIB_ERR_INVALID_PART_NUMBER = 25,
    WIMLIB_ERR_INVALID_PIPABLE_WIM = 26,
    WIMLIB_ERR_INVALID_REPARSE_DATA = 27,
    WIMLIB_ERR_INVALID_RESOURCE_HASH = 28,
    WIMLIB_ERR_INVALID_UTF16_STRING = 30,
    WIMLIB_ERR_INVALID_UTF8_STRING = 31,
    WIMLIB_ERR_IS_DIRECTORY = 32,
    WIMLIB_ERR_IS_SPLIT_WIM = 33,
    WIMLIB_ERR_LINK = 35,
    WIMLIB_ERR_METADATA_NOT_FOUND = 36,
    WIMLIB_ERR_MKDIR = 37,
    WIMLIB_ERR_MQUEUE = 38,
    WIMLIB_ERR_NOMEM = 39,
    WIMLIB_ERR_NOTDIR = 40,
    WIMLIB_ERR_NOTEMPTY = 41,
    WIMLIB_ERR_NOT_A_REGULAR_FILE = 42,
    WIMLIB_ERR_NOT_A_WIM_FILE = 43,
    WIMLIB_ERR_NOT_PIPABLE = 44,
    WIMLIB_ERR_NO_FILENAME = 45,
    WIMLIB_ERR_NTFS_3G = 46,
    WIMLIB_ERR_OPEN = 47,
    WIMLIB_ERR_OPENDIR = 48,
    WIMLIB_ERR_PATH_DOES_NOT_EXIST = 49,
    WIMLIB_ERR_READ = 50,
    WIMLIB_ERR_READLINK = 51,
    WIMLIB_ERR_RENAME = 52,
    WIMLIB_ERR_REPARSE_POINT_FIXUP_FAILED = 54,
    WIMLIB_ERR_RESOURCE_NOT_FOUND = 55,
    WIMLIB_ERR_RESOURCE_ORDER = 56,
    WIMLIB_ERR_SET_ATTRIBUTES = 57,
    WIMLIB_ERR_SET_REPARSE_DATA = 58,
    WIMLIB_ERR_SET_SECURITY = 59,
    WIMLIB_ERR_SET_SHORT_NAME = 60,
    WIMLIB_ERR_SET_TIMESTAMPS = 61,
    WIMLIB_ERR_SPLIT_INVALID = 62,
    WIMLIB_ERR_STAT = 63,
    WIMLIB_ERR_UNEXPECTED_END_OF_FILE = 65,
    WIMLIB_ERR_UNICODE_STRING_NOT_REPRESENTABLE = 66,
    WIMLIB_ERR_UNKNOWN_VERSION = 67,
    WIMLIB_ERR_UNSUPPORTED = 68,
    WIMLIB_ERR_UNSUPPORTED_FILE = 69,
    WIMLIB_ERR_WIM_IS_READONLY = 71,
    WIMLIB_ERR_WRITE = 72,
    WIMLIB_ERR_XML = 73,
    WIMLIB_ERR_WIM_IS_ENCRYPTED = 74,
    WIMLIB_ERR_WIMBOOT = 75,
    WIMLIB_ERR_ABORTED_BY_PROGRESS = 76,
    WIMLIB_ERR_UNKNOWN_PROGRESS_STATUS = 77,
    WIMLIB_ERR_MKNOD = 78,
    WIMLIB_ERR_MOUNTED_IMAGE_IS_BUSY = 79,
    WIMLIB_ERR_NOT_A_MOUNTPOINT = 80,
    WIMLIB_ERR_NOT_PERMITTED_TO_UNMOUNT = 81,
    WIMLIB_ERR_FVE_LOCKED_VOLUME = 82,
    WIMLIB_ERR_UNABLE_TO_READ_CAPTURE_CONFIG = 83,
    WIMLIB_ERR_WIM_IS_INCOMPLETE = 84,
    WIMLIB_ERR_COMPACTION_NOT_POSSIBLE = 85,
    WIMLIB_ERR_IMAGE_HAS_MULTIPLE_REFERENCES = 86,
    WIMLIB_ERR_DUPLICATE_EXPORTED_IMAGE = 87,
    WIMLIB_ERR_CONCURRENT_MODIFICATION_DETECTED = 88,
    WIMLIB_ERR_SNAPSHOT_FAILURE = 89,
    WIMLIB_ERR_INVALID_XATTR = 90,
    WIMLIB_ERR_SET_XATTR = 91,
};

}  // namespace Orc

namespace std {

template <>
struct is_error_code_enum<Orc::wimlib_errc> : public true_type
{
};

}  // namespace std

namespace Orc {

class wimlib_error_category_t : public std::error_category
{
public:
    const char* name() const noexcept override;

    std::error_condition default_error_condition(int c) const noexcept override;

    bool equivalent(const std::error_code& code, int condition) const noexcept override;

    std::string message(int ev) const noexcept override;
};

const wimlib_error_category_t& wimlib_error_category();

}  // namespace Orc
